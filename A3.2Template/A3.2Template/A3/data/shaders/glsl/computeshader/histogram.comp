// histogram.comp
#version 450

layout(local_size_x = 256) in; // Assume one workgroup processes all bins

layout(binding = 0, r32f) uniform readonly image2D inputImage; // Specify image format
layout(std430, binding = 1) buffer Histogram {
    uint bins[256];
} histogram;

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= 256) return;

    // Initialize histogram bins - consider moving this to another shader or compute pass
    if (id == 0) {
        for (int i = 0; i < 256; i++) {
            histogram.bins[i] = 0;
        }
    }

    barrier();

    ivec2 imageSize = imageSize(inputImage);
    for (int y = 0; y < imageSize.y; ++y) {
        for (int x = 0; x < imageSize.x; ++x) {
            vec4 pixel = imageLoad(inputImage, ivec2(x, y));
            float luminance = dot(pixel.rgb, vec3(0.299, 0.587, 0.114)); // Simple luminance calculation
            uint bin = uint(luminance * 255.0);
            if (bin == id) {
                atomicAdd(histogram.bins[id], 1);
            }
        }
    }
}
